// ===== sw.js (Service Worker) ===== const CACHE_NAME = 'jubilees-calendar-v1.0'; const STATIC_CACHE_NAME = 'jubilees-static-v1.0'; const DATA_CACHE_NAME = 'jubilees-data-v1.0'; // Files to cache for offline use const STATIC_FILES = [ '/', '/index.html', '/manifest.json', '/icon-192.png', '/icon-512.png', '/offline.html' ]; // Install event - cache static files self.addEventListener('install', (event) => { console.log('Service Worker installing...'); event.waitUntil( Promise.all([ caches.open(STATIC_CACHE_NAME).then(cache => { console.log('Caching static files'); return cache.addAll(STATIC_FILES); }), caches.open(DATA_CACHE_NAME).then(cache => { console.log('Data cache opened'); return cache; }) ]) ); self.skipWaiting(); }); // Activate event - clean up old caches self.addEventListener('activate', (event) => { console.log('Service Worker activating...'); event.waitUntil( caches.keys().then(cacheNames => { return Promise.all( cacheNames.map(cacheName => { if (cacheName !== STATIC_CACHE_NAME && cacheName !== DATA_CACHE_NAME && cacheName !== CACHE_NAME) { console.log('Deleting old cache:', cacheName); return caches.delete(cacheName); } }) ); }) ); self.clients.claim(); }); // Fetch event - serve from cache, fallback to network self.addEventListener('fetch', (event) => { const { request } = event; const url = new URL(request.url); // Handle navigation requests if (request.mode === 'navigate') { event.respondWith( caches.match('/').then(response => { return response || fetch(request).catch(() => { return caches.match('/offline.html'); }); }) ); return; } // Handle API and data requests if (url.pathname.startsWith('/api/') || request.headers.get('accept')?.includes('application/json')) { event.respondWith( caches.open(DATA_CACHE_NAME).then(cache => { return fetch(request).then(response => { if (response.status === 200) { cache.put(request, response.clone()); } 
